rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Kullanıcı kimlik doğrulama fonksiyonu
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Kullanıcının kendi verilerine erişimi kontrol eden fonksiyon
    function isUserOwned(userId) {
      return request.auth.uid == userId;
    }
    
    // Admin kontrolü
    function isAdmin() {
      return request.auth.token.admin == true;
    }
    
    // Kullanıcı koleksiyonu kuralları
    // Query bazlı güvenlik: 'list' operasyonları, kullanıcının yalnızca kendi userId'sine ait belgeleri getirmesini sağlar.
    match /users/{userId} {
      // Kullanıcılar kendi profillerini okuyabilir
      allow read: if isAuthenticated() && isUserOwned(userId);

      // Kullanıcılar kendi profillerini güncelleyebilir ancak sadece belirli alanları
      allow update: if isAuthenticated() && isUserOwned(userId) && ('displayName' in request.resource.data || 'photoURL' in request.resource.data || 'email' in request.resource.data) && (!('uid' in request.resource.data) && !('createdAt' in request.resource.data));

      // Yönetici tüm alanları yazabilir
      allow write: if isAuthenticated() && isAdmin();

      // buckets alt koleksiyonu kuralları
      match /buckets/{bucketId} {
        allow get, list: if isAuthenticated() && isUserOwned(userId);
        allow create: if isAuthenticated() && isUserOwned(userId);
        allow update: if isAuthenticated() && isUserOwned(userId);
        allow delete: if isAuthenticated() && isUserOwned(userId);
        
        // events alt koleksiyonu kuralları (önceki activities ile aynı)
        match /events/{eventId} {
          allow get, list: if isAuthenticated() && isUserOwned(userId) || (resource.data.is_anonymized == true);
          allow create: if isAuthenticated() && isUserOwned(userId);
          allow update: if isAuthenticated() && isUserOwned(userId);
          allow delete: if isAuthenticated() && isUserOwned(userId);
        }

        // goals alt koleksiyonu kuralları
        match /goals/{goalId} {
          allow get, list: if isAuthenticated() && isUserOwned(userId);
          allow create: if isAuthenticated() && isUserOwned(userId);
          allow update: if isAuthenticated() && isUserOwned(userId);
          allow delete: if isAuthenticated() && isUserOwned(userId);
        }

        // insights alt koleksiyonu kuralları
        match /insights/{insightId} {
          allow get, list: if isAuthenticated() && isUserOwned(userId) || (resource.data.is_anonymized == true);
          allow create: if isAuthenticated() && isUserOwned(userId);
          allow update: if isAuthenticated() && isUserOwned(userId);
          allow delete: if isAuthenticated() && isUserOwned(userId);
        }

        // daily_reports alt koleksiyonu kuralları
        match /daily_reports/{reportId} {
          allow get, list: if isAuthenticated() && isUserOwned(userId);
          allow create: if isAuthenticated() && isUserOwned(userId);
          allow update: if isAuthenticated() && isUserOwned(userId);
          allow delete: if isAuthenticated() && isUserOwned(userId);
        }

        // weekly_reports alt koleksiyonu kuralları
        match /weekly_reports/{reportId} {
          allow get, list: if isAuthenticated() && isUserOwned(userId);
          allow create: if isAuthenticated() && isUserOwned(userId);
          allow update: if isAuthenticated() && isUserOwned(userId);
          allow delete: if isAuthenticated() && isUserOwned(userId);
        }

        // automation_rules alt koleksiyonu kuralları
        match /automation_rules/{ruleId} {
          allow get, list: if isAuthenticated() && isUserOwned(userId);
          allow create: if isAuthenticated() && isUserOwned(userId);
          allow update: if isAuthenticated() && isUserOwned(userId);
          allow delete: if isAuthenticated() && isUserOwned(userId);
        }

        // settings alt koleksiyonu kuralları
        match /settings/{settingId} {
          allow get, list: if isAuthenticated() && isUserOwned(userId);
          allow create: if isAuthenticated() && isUserOwned(userId);
          allow update: if isAuthenticated() && isUserOwned(userId);
          allow delete: if isAuthenticated() && isUserOwned(userId);
        }
      }
    }
    
    // Genel istatistik koleksiyonları (anonimleştirilmiş ve herkese açık)
    match /statistics/{statId} {
      allow read: true;
    }
    
    // Takım koleksiyonu kuralları (Pro tier)
    match /teams/{teamId} {
      // Takım üyeleri okuyabilir, takım yöneticileri yazabilir
      function isTeamMember() {
        return exists(/databases/$(database)/documents/teams/$(teamId)/members/$(request.auth.uid));
      }
      
      function isTeamAdmin() {
        return get(/databases/$(database)/documents/teams/$(teamId)/members/$(request.auth.uid)).data.role == 'admin';
      }
      
      allow read: if isAuthenticated() && isTeamMember();
      allow write: if isAuthenticated() && isTeamAdmin();
      
      // Takım üyeleri koleksiyonu
      match /members/{memberId} {
        allow read: if isAuthenticated() && isTeamMember();
        allow write: if isAuthenticated() && isTeamAdmin();
      }
      
      // Takım raporları
      match /reports/{reportId} {
        allow read: if isAuthenticated() && isTeamMember();
        allow create, update: if isAuthenticated() && isTeamAdmin();
        allow delete: if isAuthenticated() && isTeamAdmin();
      }
    }
    
    // Sistem koleksiyonları (sadece admin erişimi)
    match /app_categories/{categoryId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isAdmin();
    }
    
    match /system_insights/{insightId} {
      allow read: if isAuthenticated() && isAdmin();
      allow write: if isAuthenticated() && isAdmin();
    }
    
    match /performance_metrics/{metricId} {
      allow read: if isAuthenticated() && isAdmin();
      allow write: if isAuthenticated() && isAdmin();
    }
    
    match /error_logs/{logId} {
      allow read: if isAuthenticated() && isAdmin();
      allow write: if isAuthenticated();
    }
    
    match /analytics_events/{eventId} {
      allow read: if isAuthenticated() && isAdmin();
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && isAdmin();
    }
    
    // Abonelik koleksiyonu
    match /subscriptions/{subscriptionId} {
      allow read: if isAuthenticated() && (resource.data.userId == request.auth.uid || isAdmin());
      allow write: if isAuthenticated() && isAdmin();
    }
  }
} 